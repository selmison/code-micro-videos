// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Genre is an object representing the database table.
type Genre struct {
	ID          string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	IsValidated bool      `boil:"is_validated" json:"is_validated" toml:"is_validated" yaml:"is_validated"`
	CreatedAt   null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt   null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt   null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *genreR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L genreL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GenreColumns = struct {
	ID          string
	Name        string
	IsValidated string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "id",
	Name:        "name",
	IsValidated: "is_validated",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
}

// Generated where

var GenreWhere = struct {
	ID          whereHelperstring
	Name        whereHelperstring
	IsValidated whereHelperbool
	CreatedAt   whereHelpernull_Time
	UpdatedAt   whereHelpernull_Time
	DeletedAt   whereHelpernull_Time
}{
	ID:          whereHelperstring{field: "\"genres\".\"id\""},
	Name:        whereHelperstring{field: "\"genres\".\"name\""},
	IsValidated: whereHelperbool{field: "\"genres\".\"is_validated\""},
	CreatedAt:   whereHelpernull_Time{field: "\"genres\".\"created_at\""},
	UpdatedAt:   whereHelpernull_Time{field: "\"genres\".\"updated_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"genres\".\"deleted_at\""},
}

// GenreRels is where relationship names are stored.
var GenreRels = struct {
	Categories string
	Videos     string
}{
	Categories: "Categories",
	Videos:     "Videos",
}

// genreR is where relationships are stored.
type genreR struct {
	Categories CategorySlice `boil:"Categories" json:"Categories" toml:"Categories" yaml:"Categories"`
	Videos     VideoSlice    `boil:"Videos" json:"Videos" toml:"Videos" yaml:"Videos"`
}

// NewStruct creates a new relationship struct
func (*genreR) NewStruct() *genreR {
	return &genreR{}
}

// genreL is where Load methods for each relationship are stored.
type genreL struct{}

var (
	genreAllColumns            = []string{"id", "name", "is_validated", "created_at", "updated_at", "deleted_at"}
	genreColumnsWithoutDefault = []string{"id", "name", "created_at", "updated_at", "deleted_at"}
	genreColumnsWithDefault    = []string{"is_validated"}
	genrePrimaryKeyColumns     = []string{"id"}
)

type (
	// GenreSlice is an alias for a slice of pointers to Genre.
	// This should generally be used opposed to []Genre.
	GenreSlice []*Genre
	// GenreHook is the signature for custom Genre hook methods
	GenreHook func(context.Context, boil.ContextExecutor, *Genre) error

	genreQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	genreType                 = reflect.TypeOf(&Genre{})
	genreMapping              = queries.MakeStructMapping(genreType)
	genrePrimaryKeyMapping, _ = queries.BindMapping(genreType, genreMapping, genrePrimaryKeyColumns)
	genreInsertCacheMut       sync.RWMutex
	genreInsertCache          = make(map[string]insertCache)
	genreUpdateCacheMut       sync.RWMutex
	genreUpdateCache          = make(map[string]updateCache)
	genreUpsertCacheMut       sync.RWMutex
	genreUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var genreBeforeInsertHooks []GenreHook
var genreBeforeUpdateHooks []GenreHook
var genreBeforeDeleteHooks []GenreHook
var genreBeforeUpsertHooks []GenreHook

var genreAfterInsertHooks []GenreHook
var genreAfterSelectHooks []GenreHook
var genreAfterUpdateHooks []GenreHook
var genreAfterDeleteHooks []GenreHook
var genreAfterUpsertHooks []GenreHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Genre) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genreBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Genre) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genreBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Genre) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genreBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Genre) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genreBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Genre) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genreAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Genre) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genreAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Genre) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genreAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Genre) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genreAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Genre) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genreAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// CreateGenreHook registers your hook function for all future operations.
func CreateGenreHook(hookPoint boil.HookPoint, genreHook GenreHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		genreBeforeInsertHooks = append(genreBeforeInsertHooks, genreHook)
	case boil.BeforeUpdateHook:
		genreBeforeUpdateHooks = append(genreBeforeUpdateHooks, genreHook)
	case boil.BeforeDeleteHook:
		genreBeforeDeleteHooks = append(genreBeforeDeleteHooks, genreHook)
	case boil.BeforeUpsertHook:
		genreBeforeUpsertHooks = append(genreBeforeUpsertHooks, genreHook)
	case boil.AfterInsertHook:
		genreAfterInsertHooks = append(genreAfterInsertHooks, genreHook)
	case boil.AfterSelectHook:
		genreAfterSelectHooks = append(genreAfterSelectHooks, genreHook)
	case boil.AfterUpdateHook:
		genreAfterUpdateHooks = append(genreAfterUpdateHooks, genreHook)
	case boil.AfterDeleteHook:
		genreAfterDeleteHooks = append(genreAfterDeleteHooks, genreHook)
	case boil.AfterUpsertHook:
		genreAfterUpsertHooks = append(genreAfterUpsertHooks, genreHook)
	}
}

// OneG returns a single genre record from the query using the global executor.
func (q genreQuery) OneG(ctx context.Context) (*Genre, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single genre record from the query.
func (q genreQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Genre, error) {
	o := &Genre{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for genres")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Genre records from the query using the global executor.
func (q genreQuery) AllG(ctx context.Context) (GenreSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Genre records from the query.
func (q genreQuery) All(ctx context.Context, exec boil.ContextExecutor) (GenreSlice, error) {
	var o []*Genre

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Genre slice")
	}

	if len(genreAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Genre records in the query, and panics on error.
func (q genreQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Genre records in the query.
func (q genreQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count genres rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q genreQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q genreQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if genres exists")
	}

	return count > 0, nil
}

// Categories retrieves all the category's Categories with an executor.
func (o *Genre) Categories(mods ...qm.QueryMod) categoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"category_genre\" on \"categories\".\"id\" = \"category_genre\".\"category_id\""),
		qm.Where("\"category_genre\".\"genre_id\"=?", o.ID),
	)

	query := Categories(queryMods...)
	queries.SetFrom(query.Query, "\"categories\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"categories\".*"})
	}

	return query
}

// Videos retrieves all the video's Videos with an executor.
func (o *Genre) Videos(mods ...qm.QueryMod) videoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"genre_video\" on \"videos\".\"id\" = \"genre_video\".\"video_id\""),
		qm.Where("\"genre_video\".\"genre_id\"=?", o.ID),
	)

	query := Videos(queryMods...)
	queries.SetFrom(query.Query, "\"videos\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"videos\".*"})
	}

	return query
}

// LoadCategories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (genreL) LoadCategories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGenre interface{}, mods queries.Applicator) error {
	var slice []*Genre
	var object *Genre

	if singular {
		object = maybeGenre.(*Genre)
	} else {
		slice = *maybeGenre.(*[]*Genre)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &genreR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &genreR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"categories\".*, \"a\".\"genre_id\""),
		qm.From("\"categories\""),
		qm.InnerJoin("\"category_genre\" as \"a\" on \"categories\".\"id\" = \"a\".\"category_id\""),
		qm.WhereIn("\"a\".\"genre_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load categories")
	}

	var resultSlice []*Category

	var localJoinCols []string
	for results.Next() {
		one := new(Category)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Name, &one.Description, &one.IsValidated, &one.CreatedAt, &one.UpdatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for categories")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice categories")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categories")
	}

	if len(categoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Categories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &categoryR{}
			}
			foreign.R.Genres = append(foreign.R.Genres, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Categories = append(local.R.Categories, foreign)
				if foreign.R == nil {
					foreign.R = &categoryR{}
				}
				foreign.R.Genres = append(foreign.R.Genres, local)
				break
			}
		}
	}

	return nil
}

// LoadVideos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (genreL) LoadVideos(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGenre interface{}, mods queries.Applicator) error {
	var slice []*Genre
	var object *Genre

	if singular {
		object = maybeGenre.(*Genre)
	} else {
		slice = *maybeGenre.(*[]*Genre)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &genreR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &genreR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"videos\".*, \"a\".\"genre_id\""),
		qm.From("\"videos\""),
		qm.InnerJoin("\"genre_video\" as \"a\" on \"videos\".\"id\" = \"a\".\"video_id\""),
		qm.WhereIn("\"a\".\"genre_id\" in ?", args...),
		qmhelper.WhereIsNull("\"videos\".\"deleted_at\""),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load videos")
	}

	var resultSlice []*Video

	var localJoinCols []string
	for results.Next() {
		one := new(Video)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Title, &one.Description, &one.YearLaunched, &one.Opened, &one.Rating, &one.Duration, &one.VideoFile, &one.CreatedAt, &one.UpdatedAt, &one.DeletedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for videos")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice videos")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on videos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for videos")
	}

	if len(videoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Videos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &videoR{}
			}
			foreign.R.Genres = append(foreign.R.Genres, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Videos = append(local.R.Videos, foreign)
				if foreign.R == nil {
					foreign.R = &videoR{}
				}
				foreign.R.Genres = append(foreign.R.Genres, local)
				break
			}
		}
	}

	return nil
}

// AddCategoriesG adds the given related objects to the existing relationships
// of the genre, optionally inserting them as new records.
// Appends related to o.R.Categories.
// Sets related.R.Genres appropriately.
// Uses the global database handle.
func (o *Genre) AddCategoriesG(ctx context.Context, insert bool, related ...*Category) error {
	return o.AddCategories(ctx, boil.GetContextDB(), insert, related...)
}

// AddCategories adds the given related objects to the existing relationships
// of the genre, optionally inserting them as new records.
// Appends related to o.R.Categories.
// Sets related.R.Genres appropriately.
func (o *Genre) AddCategories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Category) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"category_genre\" (\"genre_id\", \"category_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &genreR{
			Categories: related,
		}
	} else {
		o.R.Categories = append(o.R.Categories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &categoryR{
				Genres: GenreSlice{o},
			}
		} else {
			rel.R.Genres = append(rel.R.Genres, o)
		}
	}
	return nil
}

// SetCategoriesG removes all previously related items of the
// genre replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Genres's Categories accordingly.
// Replaces o.R.Categories with related.
// Sets related.R.Genres's Categories accordingly.
// Uses the global database handle.
func (o *Genre) SetCategoriesG(ctx context.Context, insert bool, related ...*Category) error {
	return o.SetCategories(ctx, boil.GetContextDB(), insert, related...)
}

// SetCategories removes all previously related items of the
// genre replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Genres's Categories accordingly.
// Replaces o.R.Categories with related.
// Sets related.R.Genres's Categories accordingly.
func (o *Genre) SetCategories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Category) error {
	query := "delete from \"category_genre\" where \"genre_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeCategoriesFromGenresSlice(o, related)
	if o.R != nil {
		o.R.Categories = nil
	}
	return o.AddCategories(ctx, exec, insert, related...)
}

// RemoveCategoriesG relationships from objects passed in.
// Removes related items from R.Categories (uses pointer comparison, removal does not keep order)
// Sets related.R.Genres.
// Uses the global database handle.
func (o *Genre) RemoveCategoriesG(ctx context.Context, related ...*Category) error {
	return o.RemoveCategories(ctx, boil.GetContextDB(), related...)
}

// RemoveCategories relationships from objects passed in.
// Removes related items from R.Categories (uses pointer comparison, removal does not keep order)
// Sets related.R.Genres.
func (o *Genre) RemoveCategories(ctx context.Context, exec boil.ContextExecutor, related ...*Category) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"category_genre\" where \"genre_id\" = $1 and \"category_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeCategoriesFromGenresSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Categories {
			if rel != ri {
				continue
			}

			ln := len(o.R.Categories)
			if ln > 1 && i < ln-1 {
				o.R.Categories[i] = o.R.Categories[ln-1]
			}
			o.R.Categories = o.R.Categories[:ln-1]
			break
		}
	}

	return nil
}

func removeCategoriesFromGenresSlice(o *Genre, related []*Category) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Genres {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Genres)
			if ln > 1 && i < ln-1 {
				rel.R.Genres[i] = rel.R.Genres[ln-1]
			}
			rel.R.Genres = rel.R.Genres[:ln-1]
			break
		}
	}
}

// AddVideosG adds the given related objects to the existing relationships
// of the genre, optionally inserting them as new records.
// Appends related to o.R.Videos.
// Sets related.R.Genres appropriately.
// Uses the global database handle.
func (o *Genre) AddVideosG(ctx context.Context, insert bool, related ...*Video) error {
	return o.AddVideos(ctx, boil.GetContextDB(), insert, related...)
}

// AddVideos adds the given related objects to the existing relationships
// of the genre, optionally inserting them as new records.
// Appends related to o.R.Videos.
// Sets related.R.Genres appropriately.
func (o *Genre) AddVideos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Video) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"genre_video\" (\"genre_id\", \"video_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &genreR{
			Videos: related,
		}
	} else {
		o.R.Videos = append(o.R.Videos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &videoR{
				Genres: GenreSlice{o},
			}
		} else {
			rel.R.Genres = append(rel.R.Genres, o)
		}
	}
	return nil
}

// SetVideosG removes all previously related items of the
// genre replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Genres's Videos accordingly.
// Replaces o.R.Videos with related.
// Sets related.R.Genres's Videos accordingly.
// Uses the global database handle.
func (o *Genre) SetVideosG(ctx context.Context, insert bool, related ...*Video) error {
	return o.SetVideos(ctx, boil.GetContextDB(), insert, related...)
}

// SetVideos removes all previously related items of the
// genre replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Genres's Videos accordingly.
// Replaces o.R.Videos with related.
// Sets related.R.Genres's Videos accordingly.
func (o *Genre) SetVideos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Video) error {
	query := "delete from \"genre_video\" where \"genre_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeVideosFromGenresSlice(o, related)
	if o.R != nil {
		o.R.Videos = nil
	}
	return o.AddVideos(ctx, exec, insert, related...)
}

// RemoveVideosG relationships from objects passed in.
// Removes related items from R.Videos (uses pointer comparison, removal does not keep order)
// Sets related.R.Genres.
// Uses the global database handle.
func (o *Genre) RemoveVideosG(ctx context.Context, related ...*Video) error {
	return o.RemoveVideos(ctx, boil.GetContextDB(), related...)
}

// RemoveVideos relationships from objects passed in.
// Removes related items from R.Videos (uses pointer comparison, removal does not keep order)
// Sets related.R.Genres.
func (o *Genre) RemoveVideos(ctx context.Context, exec boil.ContextExecutor, related ...*Video) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"genre_video\" where \"genre_id\" = $1 and \"video_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeVideosFromGenresSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Videos {
			if rel != ri {
				continue
			}

			ln := len(o.R.Videos)
			if ln > 1 && i < ln-1 {
				o.R.Videos[i] = o.R.Videos[ln-1]
			}
			o.R.Videos = o.R.Videos[:ln-1]
			break
		}
	}

	return nil
}

func removeVideosFromGenresSlice(o *Genre, related []*Video) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Genres {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Genres)
			if ln > 1 && i < ln-1 {
				rel.R.Genres[i] = rel.R.Genres[ln-1]
			}
			rel.R.Genres = rel.R.Genres[:ln-1]
			break
		}
	}
}

// Genres retrieves all the records using an executor.
func Genres(mods ...qm.QueryMod) genreQuery {
	mods = append(mods, qm.From("\"genres\""), qmhelper.WhereIsNull("\"genres\".\"deleted_at\""))
	return genreQuery{NewQuery(mods...)}
}

// FindGenreG retrieves a single record by ID.
func FindGenreG(ctx context.Context, iD string, selectCols ...string) (*Genre, error) {
	return FindGenre(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindGenre retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGenre(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Genre, error) {
	genreObj := &Genre{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"genres\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, genreObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from genres")
	}

	return genreObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Genre) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Genre) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no genres provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(genreColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	genreInsertCacheMut.RLock()
	cache, cached := genreInsertCache[key]
	genreInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			genreAllColumns,
			genreColumnsWithDefault,
			genreColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(genreType, genreMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(genreType, genreMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"genres\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"genres\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into genres")
	}

	if !cached {
		genreInsertCacheMut.Lock()
		genreInsertCache[key] = cache
		genreInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Genre record using the global executor.
// See Update for more documentation.
func (o *Genre) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Genre.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Genre) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	genreUpdateCacheMut.RLock()
	cache, cached := genreUpdateCache[key]
	genreUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			genreAllColumns,
			genrePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update genres, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"genres\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, genrePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(genreType, genreMapping, append(wl, genrePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update genres row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for genres")
	}

	if !cached {
		genreUpdateCacheMut.Lock()
		genreUpdateCache[key] = cache
		genreUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q genreQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q genreQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for genres")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for genres")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o GenreSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GenreSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), genrePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"genres\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, genrePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in genre slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all genre")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Genre) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Genre) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no genres provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(genreColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	genreUpsertCacheMut.RLock()
	cache, cached := genreUpsertCache[key]
	genreUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			genreAllColumns,
			genreColumnsWithDefault,
			genreColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			genreAllColumns,
			genrePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert genres, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(genrePrimaryKeyColumns))
			copy(conflict, genrePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"genres\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(genreType, genreMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(genreType, genreMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert genres")
	}

	if !cached {
		genreUpsertCacheMut.Lock()
		genreUpsertCache[key] = cache
		genreUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Genre record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Genre) DeleteG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB(), hardDelete)
}

// Delete deletes a single Genre record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Genre) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Genre provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), genrePrimaryKeyMapping)
		sql = "DELETE FROM \"genres\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"genres\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(genreType, genreMapping, append(wl, genrePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from genres")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for genres")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q genreQuery) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all matching rows.
func (q genreQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no genreQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from genres")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for genres")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o GenreSlice) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GenreSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(genreBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), genrePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"genres\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, genrePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), genrePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"genres\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, genrePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from genre slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for genres")
	}

	if len(genreAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Genre) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Genre provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Genre) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGenre(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GenreSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty GenreSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GenreSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GenreSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), genrePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"genres\".* FROM \"genres\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, genrePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GenreSlice")
	}

	*o = slice

	return nil
}

// GenreExistsG checks if the Genre row exists.
func GenreExistsG(ctx context.Context, iD string) (bool, error) {
	return GenreExists(ctx, boil.GetContextDB(), iD)
}

// GenreExists checks if the Genre row exists.
func GenreExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"genres\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if genres exists")
	}

	return exists, nil
}
