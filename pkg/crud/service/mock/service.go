// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/selmison/code-micro-videos/pkg/crud/service (interfaces: Service)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	domain "github.com/selmison/code-micro-videos/pkg/crud/domain"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddCastMember mocks base method
func (m *MockService) AddCastMember(arg0 context.Context, arg1 domain.GenreValidatable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCastMember", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCastMember indicates an expected call of AddCastMember
func (mr *MockServiceMockRecorder) AddCastMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCastMember", reflect.TypeOf((*MockService)(nil).AddCastMember), arg0, arg1)
}

// CreateCategory mocks base method
func (m *MockService) CreateCategory(arg0 context.Context, arg1 domain.GenreValidatable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCategory indicates an expected call of CreateCategory
func (mr *MockServiceMockRecorder) CreateCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockService)(nil).CreateCategory), arg0, arg1)
}

// CreateGenre mocks base method
func (m *MockService) CreateGenre(arg0 context.Context, arg1 domain.GenreValidatable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGenre", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGenre indicates an expected call of CreateGenre
func (mr *MockServiceMockRecorder) CreateGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGenre", reflect.TypeOf((*MockService)(nil).CreateGenre), arg0, arg1)
}

// CreateVideo mocks base method
func (m *MockService) CreateVideo(arg0 context.Context, arg1 domain.VideoValidatable) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVideo", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVideo indicates an expected call of CreateVideo
func (mr *MockServiceMockRecorder) CreateVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVideo", reflect.TypeOf((*MockService)(nil).CreateVideo), arg0, arg1)
}

// FetchCastMember mocks base method
func (m *MockService) FetchCastMember(arg0 context.Context, arg1 string) (domain.CastMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCastMember", arg0, arg1)
	ret0, _ := ret[0].(domain.CastMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCastMember indicates an expected call of FetchCastMember
func (mr *MockServiceMockRecorder) FetchCastMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCastMember", reflect.TypeOf((*MockService)(nil).FetchCastMember), arg0, arg1)
}

// FetchCategory mocks base method
func (m *MockService) FetchCategory(arg0 context.Context, arg1 string) (domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCategory", arg0, arg1)
	ret0, _ := ret[0].(domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCategory indicates an expected call of FetchCategory
func (mr *MockServiceMockRecorder) FetchCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCategory", reflect.TypeOf((*MockService)(nil).FetchCategory), arg0, arg1)
}

// FetchGenre mocks base method
func (m *MockService) FetchGenre(arg0 context.Context, arg1 string) (domain.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchGenre", arg0, arg1)
	ret0, _ := ret[0].(domain.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchGenre indicates an expected call of FetchGenre
func (mr *MockServiceMockRecorder) FetchGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchGenre", reflect.TypeOf((*MockService)(nil).FetchGenre), arg0, arg1)
}

// FetchVideo mocks base method
func (m *MockService) FetchVideo(arg0 context.Context, arg1 string) (domain.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchVideo", arg0, arg1)
	ret0, _ := ret[0].(domain.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchVideo indicates an expected call of FetchVideo
func (mr *MockServiceMockRecorder) FetchVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchVideo", reflect.TypeOf((*MockService)(nil).FetchVideo), arg0, arg1)
}

// GetCastMembers mocks base method
func (m *MockService) GetCastMembers(arg0 context.Context, arg1 int) ([]domain.CastMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCastMembers", arg0, arg1)
	ret0, _ := ret[0].([]domain.CastMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCastMembers indicates an expected call of GetCastMembers
func (mr *MockServiceMockRecorder) GetCastMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCastMembers", reflect.TypeOf((*MockService)(nil).GetCastMembers), arg0, arg1)
}

// GetCategories mocks base method
func (m *MockService) GetCategories(arg0 context.Context, arg1 int) ([]domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories", arg0, arg1)
	ret0, _ := ret[0].([]domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories
func (mr *MockServiceMockRecorder) GetCategories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockService)(nil).GetCategories), arg0, arg1)
}

// GetGenres mocks base method
func (m *MockService) GetGenres(arg0 context.Context, arg1 int) ([]domain.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenres", arg0, arg1)
	ret0, _ := ret[0].([]domain.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenres indicates an expected call of GetGenres
func (mr *MockServiceMockRecorder) GetGenres(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenres", reflect.TypeOf((*MockService)(nil).GetGenres), arg0, arg1)
}

// GetVideos mocks base method
func (m *MockService) GetVideos(arg0 context.Context, arg1 int) ([]domain.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideos", arg0, arg1)
	ret0, _ := ret[0].([]domain.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideos indicates an expected call of GetVideos
func (mr *MockServiceMockRecorder) GetVideos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideos", reflect.TypeOf((*MockService)(nil).GetVideos), arg0, arg1)
}

// RemoveCastMember mocks base method
func (m *MockService) RemoveCastMember(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCastMember", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCastMember indicates an expected call of RemoveCastMember
func (mr *MockServiceMockRecorder) RemoveCastMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCastMember", reflect.TypeOf((*MockService)(nil).RemoveCastMember), arg0, arg1)
}

// RemoveCategory mocks base method
func (m *MockService) RemoveCategory(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCategory indicates an expected call of RemoveCategory
func (mr *MockServiceMockRecorder) RemoveCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCategory", reflect.TypeOf((*MockService)(nil).RemoveCategory), arg0, arg1)
}

// RemoveGenre mocks base method
func (m *MockService) RemoveGenre(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveGenre", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveGenre indicates an expected call of RemoveGenre
func (mr *MockServiceMockRecorder) RemoveGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveGenre", reflect.TypeOf((*MockService)(nil).RemoveGenre), arg0, arg1)
}

// RemoveVideo mocks base method
func (m *MockService) RemoveVideo(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVideo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVideo indicates an expected call of RemoveVideo
func (mr *MockServiceMockRecorder) RemoveVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVideo", reflect.TypeOf((*MockService)(nil).RemoveVideo), arg0, arg1)
}

// UpdateCastMember mocks base method
func (m *MockService) UpdateCastMember(arg0 context.Context, arg1 string, arg2 domain.GenreValidatable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCastMember", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCastMember indicates an expected call of UpdateCastMember
func (mr *MockServiceMockRecorder) UpdateCastMember(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCastMember", reflect.TypeOf((*MockService)(nil).UpdateCastMember), arg0, arg1, arg2)
}

// UpdateCategory mocks base method
func (m *MockService) UpdateCategory(arg0 context.Context, arg1 string, arg2 domain.GenreValidatable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategory indicates an expected call of UpdateCategory
func (mr *MockServiceMockRecorder) UpdateCategory(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockService)(nil).UpdateCategory), arg0, arg1, arg2)
}

// UpdateGenre mocks base method
func (m *MockService) UpdateGenre(arg0 context.Context, arg1 string, arg2 domain.GenreValidatable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGenre", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGenre indicates an expected call of UpdateGenre
func (mr *MockServiceMockRecorder) UpdateGenre(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGenre", reflect.TypeOf((*MockService)(nil).UpdateGenre), arg0, arg1, arg2)
}

// UpdateVideo mocks base method
func (m *MockService) UpdateVideo(arg0 context.Context, arg1 string, arg2 domain.VideoValidatable) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVideo", arg0, arg1, arg2)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVideo indicates an expected call of UpdateVideo
func (mr *MockServiceMockRecorder) UpdateVideo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVideo", reflect.TypeOf((*MockService)(nil).UpdateVideo), arg0, arg1, arg2)
}
