// Package rest provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package rest

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /categories)
	CategoriesGet(w http.ResponseWriter, r *http.Request)

	// (POST /categories)
	CategoryCreate(w http.ResponseWriter, r *http.Request)

	// (DELETE /categories/{name})
	CategoryDelete(w http.ResponseWriter, r *http.Request, name string)

	// (GET /categories/{name})
	CategoryGetByName(w http.ResponseWriter, r *http.Request, name string)

	// (GET /genres)
	GenresGet(w http.ResponseWriter, r *http.Request)

	// (POST /genres)
	GenreCreate(w http.ResponseWriter, r *http.Request)

	// (DELETE /genres/{name})
	GenreDelete(w http.ResponseWriter, r *http.Request, name string)

	// (GET /genres/{name})
	GenreGetByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CategoriesGet operation middleware
func (siw *ServerInterfaceWrapper) CategoriesGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	siw.Handler.CategoriesGet(w, r.WithContext(ctx))
}

// CategoryCreate operation middleware
func (siw *ServerInterfaceWrapper) CategoryCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	siw.Handler.CategoryCreate(w, r.WithContext(ctx))
}

// CategoryDelete operation middleware
func (siw *ServerInterfaceWrapper) CategoryDelete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.CategoryDelete(w, r.WithContext(ctx), name)
}

// CategoryGetByName operation middleware
func (siw *ServerInterfaceWrapper) CategoryGetByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.CategoryGetByName(w, r.WithContext(ctx), name)
}

// GenresGet operation middleware
func (siw *ServerInterfaceWrapper) GenresGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	siw.Handler.GenresGet(w, r.WithContext(ctx))
}

// GenreCreate operation middleware
func (siw *ServerInterfaceWrapper) GenreCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	siw.Handler.GenreCreate(w, r.WithContext(ctx))
}

// GenreDelete operation middleware
func (siw *ServerInterfaceWrapper) GenreDelete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.GenreDelete(w, r.WithContext(ctx), name)
}

// GenreGetByName operation middleware
func (siw *ServerInterfaceWrapper) GenreGetByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.GenreGetByName(w, r.WithContext(ctx), name)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	r.Group(func(r chi.Router) {
		r.Get("/categories", wrapper.CategoriesGet)
	})
	r.Group(func(r chi.Router) {
		r.Post("/categories", wrapper.CategoryCreate)
	})
	r.Group(func(r chi.Router) {
		r.Delete("/categories/{name}", wrapper.CategoryDelete)
	})
	r.Group(func(r chi.Router) {
		r.Get("/categories/{name}", wrapper.CategoryGetByName)
	})
	r.Group(func(r chi.Router) {
		r.Get("/genres", wrapper.GenresGet)
	})
	r.Group(func(r chi.Router) {
		r.Post("/genres", wrapper.GenreCreate)
	})
	r.Group(func(r chi.Router) {
		r.Delete("/genres/{name}", wrapper.GenreDelete)
	})
	r.Group(func(r chi.Router) {
		r.Get("/genres/{name}", wrapper.GenreGetByName)
	})

	return r
}
