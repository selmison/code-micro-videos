// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/selmison/code-micro-videos/pkg/id_generator (interfaces: IdGenerator)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIdGenerator is a mock of IdGenerator interface
type MockIdGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockIdGeneratorMockRecorder
}

// MockIdGeneratorMockRecorder is the mock recorder for MockIdGenerator
type MockIdGeneratorMockRecorder struct {
	mock *MockIdGenerator
}

// NewMockIdGenerator creates a new mock instance
func NewMockIdGenerator(ctrl *gomock.Controller) *MockIdGenerator {
	mock := &MockIdGenerator{ctrl: ctrl}
	mock.recorder = &MockIdGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIdGenerator) EXPECT() *MockIdGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method
func (m *MockIdGenerator) Generate() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate
func (mr *MockIdGeneratorMockRecorder) Generate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockIdGenerator)(nil).Generate))
}
